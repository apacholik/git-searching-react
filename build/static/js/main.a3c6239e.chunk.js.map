{"version":3,"sources":["components/ResultTable.jsx","components/SearchBar.jsx","components/Pagination.jsx","App.js","serviceWorker.js","index.js"],"names":["ResultTable","numberOfRows","this","props","react_default","a","createElement","className","children","slice","startItemBy","map","row","key","id","title","owner","stars","createAt","Component","SearchBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","render","type","placeholder","onChange","delayForWriteEnd","ref","inputRef","timeoutFingerprint","React","createRef","_this2","clearInterval","setTimeout","ReferenceError","current","value","Pagination","_this$props","pagesNumber","onClick","actualPage","buttons","_loop","i","push","concat","App","state","githubRepos","pages","startShowResultByItem","query","searchParameters","URLSearchParams","set","fetch","toString","then","res","json","resultQuery","items","setState","item","createdDate","Date","created_at","name","login","stargazers_count","getFullYear","getMonth","getDate","length","errors","forEach","element","message","alert","SearchBar_SearchBar","text","searchInGithubRepositories","ResultTable_ResultTable","Pagination_Pagination","newPage","goToPage","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a3c6239e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class ResultTable extends Component {\r\n  render() {\r\n    const numberOfRows = this.props.numberOfRows || 5;\r\n    return (\r\n      <table className=\"table is-fullwidth table is-bordered\">\r\n        <thead>\r\n          <tr>\r\n            <th className=\"has-text-right\">ID</th>\r\n            <th className=\"has-text-centered\">Repo Title</th>\r\n            <th className=\"has-text-centered\">Owner</th>\r\n            <th className=\"has-text-centered\">Stars</th>\r\n            <th className=\"has-text-centered\">Create at</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {this.props.children\r\n            .slice(\r\n              this.props.startItemBy,\r\n              numberOfRows + this.props.startItemBy\r\n            )\r\n            .map(row => (\r\n              <tr key={row.id}>\r\n                <td className=\"has-text-centered\">{row.id}</td>\r\n                <td className=\"has-text-centered\">{row.title}</td>\r\n                <td className=\"has-text-centered\">{row.owner}</td>\r\n                <td className=\"has-text-centered\">{row.stars}</td>\r\n                <td className=\"has-text-centered\">{row.createAt}</td>\r\n              </tr>\r\n            ))}\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.timeoutFingerprint = null;\r\n    this.inputRef = new React.createRef();\r\n  }\r\n\r\n  delayForWriteEnd() {\r\n    clearInterval(this.timeoutFingerprint);\r\n    this.timeoutFingerprint = setTimeout(() => {\r\n      if (this.props.onChange) this.props.onChange(this.inputRef.current.value);\r\n      else throw new ReferenceError('Not add props onChange');\r\n    }, 1500);\r\n  }\r\n\r\n  render = () => (\r\n    <div className=\"control has-icons-right\">\r\n      <input\r\n        className=\"input\"\r\n        type=\"text\"\r\n        placeholder=\"Search...\"\r\n        onChange={() => this.delayForWriteEnd()}\r\n        ref={this.inputRef}\r\n      />\r\n      <span className=\"icon is-small is-right\">\r\n        <i className=\"fas fa-search\" />\r\n      </span>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nexport default class Pagination extends Component {\r\n  render() {\r\n    const { pagesNumber, onClick } = this.props;\r\n    const actualPage = this.props.actualPage || 1;\r\n    if (!onClick) throw new ReferenceError('Not add props onChange');\r\n    const buttons = [];\r\n    for (let i = 1; i <= pagesNumber; i++)\r\n      buttons.push(\r\n        // eslint-disable-next-line react/button-has-type\r\n        <button\r\n          key={i}\r\n          className={`button is-text ${actualPage === i ? 'is-active' : ''}`}\r\n          onClick={() => onClick(i)}\r\n        >\r\n          {i}\r\n        </button>\r\n      );\r\n    return buttons;\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport 'bulma';\r\nimport '@fortawesome/fontawesome-free/js/all';\r\nimport ResultTable from './components/ResultTable.jsx';\r\nimport SearchBar from './components/SearchBar.jsx';\r\nimport Pagination from './components/Pagination.jsx';\r\n\r\nconst GITHUB_SEARCH_URL = 'https://api.github.com/search/repositories';\r\nconst GITHUB_BASES_PARAMETERS = 'q=test&sort=stars&order=desc&page=1';\r\n\r\nclass App extends Component {\r\n  // eslint-disable-next-line no-useless-constructor\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      githubRepos: [],\r\n      pages: 0,\r\n      actualPage: 1,\r\n      startShowResultByItem: 0,\r\n    };\r\n  }\r\n\r\n  async searchInGithubRepositories(query) {\r\n    this.searchParameters = new URLSearchParams(GITHUB_BASES_PARAMETERS);\r\n    this.searchParameters.set('q', query);\r\n    const resultQuery = await fetch(\r\n      `${GITHUB_SEARCH_URL}?${this.searchParameters.toString()}`\r\n    ).then(res => res.json());\r\n    if (resultQuery.items) {\r\n      this.setState({\r\n        githubRepos: resultQuery.items.map(item => {\r\n          const createdDate = new Date(item.created_at);\r\n          return {\r\n            id: item.id,\r\n            title: item.name,\r\n            owner: item.owner.login,\r\n            stars: item.stargazers_count,\r\n            createAt: `${createdDate.getFullYear()}-${\r\n              createdDate.getMonth() < 9\r\n                ? `0${createdDate.getMonth() + 1}`\r\n                : `${createdDate.getMonth() + 1}`\r\n            }-${\r\n              createdDate.getDate() < 10\r\n                ? `0${createdDate.getDate()}`\r\n                : `${createdDate.getDate()}`\r\n            }`,\r\n          };\r\n        }),\r\n        pages: resultQuery.items.length / 5,\r\n      });\r\n    } else if (resultQuery.errors) {\r\n      let errors = \"I'hv got errors:\";\r\n      resultQuery.errors.forEach(element => {\r\n        errors += `\\n${element.message}`;\r\n      });\r\n      // this will change when do this \"story\" https://trello.com/c/R8O7cPac\r\n      // eslint-disable-next-line no-alert\r\n      alert(errors);\r\n    }\r\n  }\r\n\r\n  async goToPage(pagesNumber) {\r\n    this.setState({\r\n      actualPage: pagesNumber,\r\n      startShowResultByItem: (pagesNumber - 1) * 5,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <section className=\"section\">\r\n        <div className=\"columns\">\r\n          <div className=\"column is-three-fifths is-offset-one-fifth\">\r\n            <div className=\"columns is-multiline\">\r\n              <div className=\"column is-full\">\r\n                <SearchBar\r\n                  onChange={text => this.searchInGithubRepositories(text)}\r\n                />\r\n              </div>\r\n              <div className=\"column is-full\">\r\n                <ResultTable startItemBy={this.state.startShowResultByItem}>\r\n                  {this.state.githubRepos}\r\n                </ResultTable>\r\n              </div>\r\n              <div className=\"column is-full has-text-centered\">\r\n                <Pagination\r\n                  pagesNumber={this.state.pages}\r\n                  actualPage={this.state.actualPage}\r\n                  onClick={newPage => this.goToPage(newPage)}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          // eslint-disable-next-line\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      // eslint-disable-next-line no-param-reassign\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              // eslint-disable-next-line no-console\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              // eslint-disable-next-line no-console\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      // eslint-disable-next-line no-console\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      // eslint-disable-next-line no-console\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}