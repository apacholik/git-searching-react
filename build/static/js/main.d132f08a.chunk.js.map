{"version":3,"sources":["components/ResultTable.jsx","components/SearchBar.jsx","App.js","serviceWorker.js","index.js"],"names":["ResultTable","numberOfRows","this","props","react_default","a","createElement","className","children","slice","map","row","key","id","title","owner","stars","createAt","Component","SearchBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","render","type","placeholder","onChange","delayForWriteEnd","ref","inputRef","timeoutFingerprint","React","createRef","_this2","clearInterval","setTimeout","ReferenceError","current","value","App","state","githubRepos","query","searchParameters","URLSearchParams","set","fetch","concat","toString","then","res","json","resultQuery","items","setState","item","createdDate","Date","created_at","name","login","stargazers_count","getFullYear","getMonth","getDate","errors","forEach","element","message","alert","SearchBar_SearchBar","text","searchInGithubRepositories","ResultTable_ResultTable","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kOAEqBA,gMAEjB,IAAMC,EAAeC,KAAKC,MAAMF,cAAgB,EAChD,OACEG,EAAAC,EAAAC,cAAA,SAAOC,UAAU,wCACfH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,MACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,cACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,SACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,SACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAd,eAGJH,EAAAC,EAAAC,cAAA,aACGJ,KAAKC,MAAMK,SAASC,MAAM,EAAGR,GAAcS,IAAI,SAAAC,GAAG,OACjDP,EAAAC,EAAAC,cAAA,MAAIM,IAAKD,EAAIE,IACXT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAqBI,EAAIE,IACvCT,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAqBI,EAAIG,OACvCV,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAqBI,EAAII,OACvCX,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAqBI,EAAIK,OACvCZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,qBAAqBI,EAAIM,sBArBZC,cCApBC,cACnB,SAAAA,EAAYhB,GAAO,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAiB,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAvB,KAAMC,KAaRuB,OAAS,kBACPtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,QACVoB,KAAK,OACLC,YAAY,YACZC,SAAU,kBAAMT,EAAKU,oBACrBC,IAAKX,EAAKY,WAEZ5B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,0BACdH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,qBAtBjBa,EAAKa,mBAAqB,KAC1Bb,EAAKY,SAAW,IAAIE,IAAMC,UAHTf,kFAMA,IAAAgB,EAAAlC,KACjBmC,cAAcnC,KAAK+B,oBACnB/B,KAAK+B,mBAAqBK,WAAW,WACnC,IAAIF,EAAKjC,MAAM0B,SACV,MAAM,IAAIU,eAAe,0BADLH,EAAKjC,MAAM0B,SAASO,EAAKJ,SAASQ,QAAQC,QAElE,aAZgCvB,aC4ExBwB,cAnEb,SAAAA,IAAc,IAAAtB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAwC,IACZtB,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAqB,GAAAjB,KAAAvB,QACKyC,MAAQ,CACXC,YAAa,IAHHxB,kIAOmByB,kFAC/B3C,KAAK4C,iBAAmB,IAAIC,gBAZA,uCAa5B7C,KAAK4C,iBAAiBE,IAAI,IAAKH,YACLI,MAAK,GAAAC,OAfT,6CAeS,KAAAA,OACLhD,KAAK4C,iBAAiBK,aAC9CC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,iBAFZC,UAGUC,MACdtD,KAAKuD,SAAS,CACZb,YAAaW,EAAYC,MAAM9C,IAAI,SAAAgD,GACjC,IAAMC,EAAc,IAAIC,KAAKF,EAAKG,YAClC,MAAO,CACLhD,GAAI6C,EAAK7C,GACTC,MAAO4C,EAAKI,KACZ/C,MAAO2C,EAAK3C,MAAMgD,MAClB/C,MAAO0C,EAAKM,iBACZ/C,SAAQ,GAAAiC,OAAKS,EAAYM,cAAjB,KAAAf,OACNS,EAAYO,WAAa,EAAzB,IAAAhB,OACQS,EAAYO,WAAa,GADjC,GAAAhB,OAEOS,EAAYO,WAAa,GAH1B,KAAAhB,OAKNS,EAAYQ,UAAY,GAAxB,IAAAjB,OACQS,EAAYQ,WADpB,GAAAjB,OAEOS,EAAYQ,iBAKlBZ,EAAYa,SACjBA,EAAS,mBACbb,EAAYa,OAAOC,QAAQ,SAAAC,GACzBF,GAAM,KAAAlB,OAASoB,EAAQC,WAIzBC,MAAMJ,wIAID,IAAAhC,EAAAlC,KACP,OACEE,EAAAC,EAAAC,cAAA,WAASC,UAAU,WACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8CACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACmE,EAAD,CACE5C,SAAU,SAAA6C,GAAI,OAAItC,EAAKuC,2BAA2BD,OAGtDtE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAACsE,EAAD,KAAc1E,KAAKyC,MAAMC,yBA3DvB1B,aCGE2D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASxD,OAAOtB,EAAAC,EAAAC,cAAC6E,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,KAAK,SAAAqC,GACjCA,EAAaC","file":"static/js/main.d132f08a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class ResultTable extends Component {\n  render() {\n    const numberOfRows = this.props.numberOfRows || 5;\n    return (\n      <table className=\"table is-fullwidth table is-bordered\">\n        <thead>\n          <tr>\n            <th className=\"has-text-right\">ID</th>\n            <th className=\"has-text-centered\">Repo Title</th>\n            <th className=\"has-text-centered\">Owner</th>\n            <th className=\"has-text-centered\">Stars</th>\n            <th className=\"has-text-centered\">Create at</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.props.children.slice(0, numberOfRows).map(row => (\n            <tr key={row.id}>\n              <td className=\"has-text-centered\">{row.id}</td>\n              <td className=\"has-text-centered\">{row.title}</td>\n              <td className=\"has-text-centered\">{row.owner}</td>\n              <td className=\"has-text-centered\">{row.stars}</td>\n              <td className=\"has-text-centered\">{row.createAt}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport default class SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    this.timeoutFingerprint = null;\n    this.inputRef = new React.createRef();\n  }\n\n  delayForWriteEnd() {\n    clearInterval(this.timeoutFingerprint);\n    this.timeoutFingerprint = setTimeout(() => {\n      if (this.props.onChange) this.props.onChange(this.inputRef.current.value);\n      else throw new ReferenceError('Not add props onChange');\n    }, 1500);\n  }\n\n  render = () => (\n    <div className=\"control has-icons-right\">\n      <input\n        className=\"input\"\n        type=\"text\"\n        placeholder=\"Search...\"\n        onChange={() => this.delayForWriteEnd()}\n        ref={this.inputRef}\n      />\n      <span className=\"icon is-small is-right\">\n        <i className=\"fas fa-search\" />\n      </span>\n    </div>\n  );\n}\n","import React, { Component } from 'react';\nimport 'bulma';\nimport '@fortawesome/fontawesome-free/js/all';\nimport ResultTable from './components/ResultTable.jsx';\nimport SearchBar from './components/SearchBar.jsx';\n\nconst GITHUB_SEARCH_URL = 'https://api.github.com/search/repositories';\nconst GITHUB_BASES_PARAMETERS = 'q=test&sort=stars&order=desc&page=1';\n\nclass App extends Component {\n  // eslint-disable-next-line no-useless-constructor\n  constructor() {\n    super();\n    this.state = {\n      githubRepos: [],\n    };\n  }\n\n  async searchInGithubRepositories(query) {\n    this.searchParameters = new URLSearchParams(GITHUB_BASES_PARAMETERS);\n    this.searchParameters.set('q', query);\n    const resultQuery = await fetch(\n      `${GITHUB_SEARCH_URL}?${this.searchParameters.toString()}`\n    ).then(res => res.json());\n    if (resultQuery.items) {\n      this.setState({\n        githubRepos: resultQuery.items.map(item => {\n          const createdDate = new Date(item.created_at);\n          return {\n            id: item.id,\n            title: item.name,\n            owner: item.owner.login,\n            stars: item.stargazers_count,\n            createAt: `${createdDate.getFullYear()}-${\n              createdDate.getMonth() < 9\n                ? `0${createdDate.getMonth() + 1}`\n                : `${createdDate.getMonth() + 1}`\n            }-${\n              createdDate.getDate() < 10\n                ? `0${createdDate.getDate()}`\n                : `${createdDate.getDate()}`\n            }`,\n          };\n        }),\n      });\n    } else if (resultQuery.errors) {\n      let errors = \"I'hv got errors:\";\n      resultQuery.errors.forEach(element => {\n        errors += `\\n${element.message}`;\n      });\n      // this will change when do this \"story\" https://trello.com/c/R8O7cPac\n      // eslint-disable-next-line no-alert\n      alert(errors);\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"section\">\n        <div className=\"columns\">\n          <div className=\"column is-three-fifths is-offset-one-fifth\">\n            <div className=\"columns is-multiline\">\n              <div className=\"column is-full\">\n                <SearchBar\n                  onChange={text => this.searchInGithubRepositories(text)}\n                />\n              </div>\n              <div className=\"column is-full\">\n                <ResultTable>{this.state.githubRepos}</ResultTable>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // eslint-disable-next-line\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      // eslint-disable-next-line no-param-reassign\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // eslint-disable-next-line no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // eslint-disable-next-line no-console\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // eslint-disable-next-line no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}